
#!/bin/bash

echo "=== B·∫Øt ƒë·∫ßu build APK Chat Offline ==="
echo "Th·ªùi gian: $(date)"
echo "H·ªá ƒëi·ªÅu h√†nh: $(lsb_release -d | cut -f2)"
echo "Java version: $(java -version 2>&1 | head -n 1)"
echo "Android SDK: $ANDROID_SDK_ROOT"
echo

# Ki·ªÉm tra m√¥i tr∆∞·ªùng
if [ ! -d "/root/android-sdk" ]; then
    echo "‚ùå L·ªói: Android SDK kh√¥ng t√¨m th·∫•y t·∫°i /root/android-sdk"
    exit 1
fi

if [ -z "$ANDROID_SDK_ROOT" ]; then
    export ANDROID_SDK_ROOT=/root/android-sdk
    echo "‚úÖ ƒê√£ set ANDROID_SDK_ROOT=/root/android-sdk"
fi

if [ -z "$ANDROID_HOME" ]; then
    export ANDROID_HOME=/root/android-sdk
    echo "‚úÖ ƒê√£ set ANDROID_HOME=/root/android-sdk"
fi

# Add Android tools to PATH
export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin

# Set JAVA_OPTS to avoid JVM conflicts
export JAVA_OPTS="-Xmx2g -Xms512m"
export GRADLE_OPTS="-Xmx2g -Xms512m -Dfile.encoding=UTF-8"

echo "üîß Chu·∫©n b·ªã build..."

# Ki·ªÉm tra v√† set quy·ªÅn cho gradlew
if [ ! -f "gradlew" ]; then
    echo "‚ùå L·ªói: gradlew kh√¥ng t·ªìn t·∫°i!"
    exit 1
fi

echo "üîß Setting gradlew permissions..."
chmod +x gradlew

if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
    echo "üì• Downloading Gradle wrapper jar..."
    mkdir -p gradle/wrapper
    wget -O gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.0.2/gradle/wrapper/gradle-wrapper.jar
fi

# Validate gradle wrapper
echo "üîç Validating Gradle..."
if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
    echo "‚ùå L·ªói: gradle-wrapper.jar kh√¥ng t·ªìn t·∫°i!"
    exit 1
fi

# Test gradle
echo "üß™ Testing Gradle..."
./gradlew --version
if [ $? -ne 0 ]; then
    echo "‚ùå L·ªói: Gradle kh√¥ng ho·∫°t ƒë·ªông!"
    exit 1
fi

# Clean previous builds
echo "üßπ Cleaning previous builds..."
./gradlew clean --no-daemon

# Build debug APK
echo "üî® Building debug APK..."
./gradlew assembleDebug --no-daemon

# Check if build was successful
if [ $? -eq 0 ]; then
    echo "‚úÖ Build th√†nh c√¥ng!"
    
    # Find APK file
    APK_PATH="app/build/outputs/apk/debug/app-debug.apk"
    
    if [ -f "$APK_PATH" ]; then
        APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
        echo "üì± APK ƒë∆∞·ª£c t·∫°o t·∫°i: $APK_PATH"
        echo "üìè K√≠ch th∆∞·ªõc APK: $APK_SIZE"
        
        # Create output directory
        mkdir -p output
        
        # Copy APK to output directory with timestamp
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        OUTPUT_APK="output/ChatOffline_${TIMESTAMP}.apk"
        cp "$APK_PATH" "$OUTPUT_APK"
        echo "üíæ APK ƒë√£ ƒë∆∞·ª£c copy to: $OUTPUT_APK"
        
        # Create zip package
        ZIP_FILE="ChatOffline_${TIMESTAMP}.zip"
        echo "üì¶ T·∫°o package zip..."
        
        zip -r "$ZIP_FILE" \
            app/ \
            build.gradle \
            settings.gradle \
            gradle.properties \
            local.properties \
            build_apk.sh \
            README_VPS.md \
            "$OUTPUT_APK" \
            -x "*/build/*" "*/.*" "*/.gradle/*"
        
        if [ -f "$ZIP_FILE" ]; then
            ZIP_SIZE=$(du -h "$ZIP_FILE" | cut -f1)
            echo "‚úÖ Package ho√†n th√†nh: $ZIP_FILE"
            echo "üìè K√≠ch th∆∞·ªõc ZIP: $ZIP_SIZE"
            echo
            echo "üéâ Ho√†n th√†nh! Files ƒë√£ t·∫°o:"
            echo "   - APK: $OUTPUT_APK"
            echo "   - Source + APK: $ZIP_FILE"
        else
            echo "‚ùå L·ªói t·∫°o ZIP file"
        fi
        
    else
        echo "‚ùå Kh√¥ng t√¨m th·∫•y APK file t·∫°i $APK_PATH"
        exit 1
    fi
else
    echo "‚ùå Build failed!"
    echo "üîç Chi ti·∫øt l·ªói:"
    ./gradlew assembleDebug --stacktrace --no-daemon
    exit 1
fi

echo
echo "=== Build ho√†n th√†nh ==="
echo "Th·ªùi gian k·∫øt th√∫c: $(date)"
